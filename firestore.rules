
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isPublished() {
      return resource.data.status == 'published';
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Anyone can view a user's profile
      allow read;

      // Only the authenticated user can create their own profile document
      allow create: if isOwner(userId);
      
      // An authenticated user can update another user's 'followers' array (to follow/unfollow them)
      // They can also update their own document for any other field
      allow update: if isSignedIn() && (
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) && 
                     (request.resource.data.followers.size() == resource.data.followers.size() + 1 || 
                      request.resource.data.followers.size() == resource.data.followers.size() - 1)) ||
                    (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['followers', 'following']))
                  );

      // A user should not be able to delete their account through the app directly
      allow delete: if false;
    }
    
    // Allow querying the users collection for search functionality
    match /users/{document=**} {
        allow list: if true;
    }

    // =================================
    // Posts Collection
    // =================================
    match /posts/{postId} {
      // Anyone can read a published post
      allow read: if isPublished();
      
      // Allow list reads for published posts (for feeds)
      allow list: if isPublished();

      // Only authenticated users can create posts for themselves
      allow create: if isOwner(request.resource.data.userId);
      
      // Only the owner of the post can update it.
      // Also allow any signed-in user to update likes and comments.
      allow update: if isSignedIn() && 
                   (isOwner(resource.data.userId) || 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy', 'comments']));

      // Only the owner can delete their post
      allow delete: if isOwner(resource.data.userId);
    }
    
    // =================================
    // Stories Collection
    // =================================
    match /stories/{storyId} {
       // Anyone can view a published story
      allow get: if isPublished();
      // Allow anyone to list stories (for the story feed)
      allow list: if request.query.get('status') == 'published';
      
      // Only authenticated users can create stories for themselves
      allow create: if isOwner(request.resource.data.userId);
      
      // Only the owner can update their story
      allow update: if isOwner(resource.data.userId);
      
      allow delete: if false;
    }

    // =================================
    // Activity Collection
    // =================================
    match /activity/{activityId} {
        // Only the notified user can read their activity
        allow get, list: if isSignedIn() && request.query.get('notifiedUserId') == request.auth.uid;

        // Any signed-in user can create an activity entry (e.g., liking a post)
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.actorId;
        
        // Allow updating 'read' status by the notified user
        allow update: if isOwner(resource.data.notifiedUserId) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
                       
        allow delete: if false;
    }

    // =================================
    // Conversations and Messages
    // =================================
    match /conversations/{conversationId} {
        // A user can read/list a conversation if they are part of it
        allow read: if isSignedIn() && request.auth.uid in resource.data.userIds;

        // A user can create a conversation if they are one of the participants
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.userIds;
        
        // A user can update a conversation (e.g., lastMessage) if they are part of it
        allow update: if isSignedIn() && request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
            // A user can read/list messages if they are part of the parent conversation
            allow read, list: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds.hasAny([request.auth.uid]);
            
            // A user can create a message if they are part of the conversation and are the sender
            allow create: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds.hasAny([request.auth.uid]) && isOwner(request.resource.data.senderId);
        }
    }
  }
}
