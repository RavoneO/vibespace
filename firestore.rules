rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Publicly readable, but only the user can write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Generally, don't allow user deletion from client
    }

    // Posts: Publicly readable. Authenticated users can create. Only owner/collaborator can update/delete.
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      
      // Allow update for caption/tags/collaborators only by owner/collaborator
      allow update: if isAuthenticated() && (
                      isOwner(resource.data.userId) || 
                      request.auth.uid in resource.data.collaboratorIds
                    ) &&
                    request.resource.data.keys().hasOnly(['caption', 'contentUrl', 'status', 'tags']);

      // Liking and commenting can be done by any authenticated user
      allow update: if isAuthenticated() && 
                      request.resource.data.keys().hasAny(['likes', 'likedBy', 'comments']);

      allow delete: if isAuthenticated() && (
                      isOwner(resource.data.userId) || 
                      request.auth.uid in resource.data.collaboratorIds
                    );
    }
    
    // Stories: Publicly readable for 24 hours (enforced by query). Only owner can create/delete.
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Activity: Only the notified user can read their own activity stream.
    match /activity/{activityId} {
      allow read: if isAuthenticated() && isOwner(resource.data.notifiedUserId);
      allow create: if isAuthenticated(); // Creations are validated by backend logic
      allow update, delete: if false;
    }
    
    // Conversations: Only members of the conversation can interact.
    match /conversations/{conversationId} {
        allow read, create, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
        
        // Messages: Only members of the conversation can read/write messages.
        match /messages/{messageId} {
             allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds.hasAny([request.auth.uid]);
             allow update, delete: if false;
        }
    }
  }
}