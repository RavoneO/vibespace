
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read a user's profile
      allow read: if true;
      
      // Only the user can create or update their own profile
      allow create, update: if isOwner(userId);
    }
    
    // Posts collection
    match /posts/{postId} {
      // Anyone can read a published post
      allow read: if resource.data.status == 'published';
      
      // An authenticated user can create a post
      allow create: if isSignedIn();
      
      // The post owner or a collaborator can update or delete it
      allow update, delete: if isOwner(resource.data.userId) || request.auth.uid in resource.data.collaboratorIds;
    }
    
    // Stories collection
    match /stories/{storyId} {
        // Anyone can read a published story
        allow read: if resource.data.status == 'published';

        // An authenticated user can create a story
        allow create: if isSignedIn();

        // Only the owner can update a story (e.g., status)
        allow update: if isOwner(resource.data.userId);
    }

    // Activity collection
    match /activity/{activityId} {
        // A user can only read their own activity notifications
        allow read: if isOwner(resource.data.notifiedUserId);
        
        // Activity is created by the server-side functions/triggers, so client-side create is not allowed.
        // For this app, we'll allow any signed-in user to create, as it's handled by server functions
        allow create: if isSignedIn();
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
        // Users can only read conversations they are a part of
        allow read, create, update: if isSignedIn() && request.auth.uid in resource.data.userIds;

        // Messages subcollection
        match /messages/{messageId} {
            // Users can read/write messages in conversations they are a part of
            allow read, create: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds.hasAny([request.auth.uid]);
        }
    }
  }
}
