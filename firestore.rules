rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default-deny all writes, allows for specific overrides below.
    allow write: if false;
    
    // Allow public read access to all documents.
    // This is necessary for Server-Side Rendering (SSR) to work.
    allow read: if true;

    // USERS
    match /users/{userId} {
      // Authenticated users can create their own profile.
      allow create: if request.auth != null && request.auth.uid == userId;
      // A user can only update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // POSTS
    match /posts/{postId} {
      // Any authenticated user can create a post.
      allow create: if request.auth != null;
      
      // A user can update their own post.
      // Any authenticated user can update likes/comments.
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || (request.resource.data.collaboratorIds != null && request.auth.uid in request.resource.data.collaboratorIds));
      
      // A user can only delete their own post.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // STORIES
    match /stories/{storyId} {
      // Authenticated users can create stories.
      allow create: if request.auth != null;
      // Users can only update/delete their own stories.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // CONVERSATIONS & MESSAGES
    match /conversations/{convoId} {
      // Users can only read conversations they are a part of.
      // This overrides the global read rule for this path.
      allow read: if request.auth != null && request.auth.uid in resource.data.userIds;
      // Users can create conversations if they are in them.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.userIds;

      match /messages/{msgId} {
        // Users can only read/write messages in conversations they are part of.
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/conversations/$(convoId)).data.userIds.includes(request.auth.uid);
      }
    }
    
    // ACTIVITY
    match /activity/{activityId} {
        // A user can only read their own activity notifications.
        allow read: if request.auth != null && request.auth.uid == resource.data.notifiedUserId;
        // Creating activity is handled by backend logic/other rules, but we'll allow any authenticated user to be safe.
        allow create: if request.auth != null;
    }
  }
}
