rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read all, create for self, update for self
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Users should not be able to delete their own accounts directly
    }

    // Posts: Can read all, create if authenticated, update/delete for self or collaborator
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
          request.auth.uid == resource.data.userId ||
          (resource.data.collaboratorIds != null && request.auth.uid in resource.data.collaboratorIds)
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Stories: Can read all, create/update/delete for self
    match /stories/{storyId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Conversations and Messages: Only members can read/write
    match /conversations/{conversationId} {
        allow read, create, update: if request.auth != null && request.auth.uid in resource.data.userIds;

        match /messages/{messageId} {
            allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds;
        }
    }

    // Activity: Can only read own, create is handled by backend logic (implicitly allowed if other actions are)
     match /activity/{activityId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.notifiedUserId;
      allow create: if request.auth != null; // Let backend logic handle who can create what
    }
  }
}
